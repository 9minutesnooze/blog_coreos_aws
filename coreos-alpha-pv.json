{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "CoreOS on EC2: http://coreos.com/docs/running-coreos/cloud-providers/ec2/",
  "Mappings" : {
      "RegionMap" : {

          "eu-central-1" : {
              "AMI" : "ami-9623128b"
          },

          "ap-northeast-1" : {
              "AMI" : "ami-d6999dd7"
          },

          "sa-east-1" : {
              "AMI" : "ami-79a41564"
          },

          "ap-southeast-2" : {
              "AMI" : "ami-e1dfb1db"
          },

          "ap-southeast-1" : {
              "AMI" : "ami-7598ba27"
          },

          "us-east-1" : {
              "AMI" : "ami-343b195c"
          },

          "us-west-2" : {
              "AMI" : "ami-d92377e9"
          },

          "us-west-1" : {
              "AMI" : "ami-a7adbce2"
          },

          "eu-west-1" : {
              "AMI" : "ami-c6e858b1"
          }

      }
  },
  "Parameters": {
    "AZs" : {
      "Description" : "Availability Zones to use (us-east-1a, us-east-1b, etc)",
      "Type" : "CommaDelimitedList",
      "Default": "us-east-1a, us-east-1b, us-east-1d, us-east-1e"
    },
    "InstanceType" : {
      "Description" : "EC2 PV instance type (m3.medium, etc). Note: m1.small is not supported.",
      "Type" : "String",
      "Default" : "t1.micro",
      "AllowedValues" : ["m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m1.medium", "m1.large", "m1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c1.medium", "c1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "hi1.4xlarge", "hs1.8xlarge", "t1.micro"],
      "ConstraintDescription" : "Must be a valid EC2 PV instance type. Note: m1.small is not supported."
    },
    "ClusterSize": {
      "Default": "3",
      "MinValue": "1",
      "MaxValue": "6",
      "Description": "Number of nodes in cluster (1-6).",
      "Type": "Number"
    },
    "DiscoveryURL": {
      "Description": "An unique etcd cluster discovery URL. Grab a new token from https://discovery.etcd.io/new",
      "Type": "String"
    },
    "AdvertisedIPAddress": {
      "Description": "Use 'private' if your etcd cluster is within one region or 'public' if it spans regions or cloud providers.",
      "Default": "private",
      "AllowedValues": ["private", "public"],
      "Type": "String"
    },
    "AllowSSHFrom": {
      "Description": "The net block (CIDR) that SSH is available to.",
      "Default": "0.0.0.0/0",
      "Type": "String"
    },
    "KeyPair" : {
      "Description" : "The name of an EC2 Key Pair to allow SSH access to the instance.",
      "Default": "AaronBrown",
      "Type" : "String"
    }
  },
  "Resources": {
    "CoreOSSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "CoreOS SecurityGroup",
        "SecurityGroupIngress": [
          {"IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": {"Ref": "AllowSSHFrom"}}
        ]
      }
    },
    "Ingress8080": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": { "Ref": "CoreOSSecurityGroup"},
        "IpProtocol": "tcp",
        "FromPort": "8080",
        "ToPort": "8080",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "Ingress4001": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": {"Ref": "CoreOSSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "4001", "ToPort": "4001", "SourceSecurityGroupId": {
          "Fn::GetAtt" : [ "CoreOSSecurityGroup", "GroupId" ]
        }
      }
    },
    "Ingress7001": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": {"Ref": "CoreOSSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "7001", "ToPort": "7001", "SourceSecurityGroupId": {
          "Fn::GetAtt" : [ "CoreOSSecurityGroup", "GroupId" ]
        } 
      }
    },
    "CoreOSELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "AvailabilityZones": {"Ref": "AZs"},
        "ConnectionDrainingPolicy" : {
          "Enabled" : "true",
          "Timeout" : "30"
        },
        "CrossZone" : "true",
        "HealthCheck" : {
          "HealthyThreshold": 2,
          "Interval": 30,
          "Target": "HTTP:8080/",
          "Timeout": 5,
          "UnhealthyThreshold": 2
        },
        "Listeners" : [
          {
            "InstancePort" : "8080",
            "InstanceProtocol" : "HTTP",
            "LoadBalancerPort" : "80",
            "Protocol" : "HTTP"
          }
        ]
      }
    },
    "CoreOSServerAutoScale": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": {"Ref": "AZs"},
        "LaunchConfigurationName": {"Ref": "CoreOSServerLaunchConfig"},
        "MinSize": "1",
        "MaxSize": "6",
        "DesiredCapacity": {"Ref": "ClusterSize"},
        "Tags": [
            {"Key": "Name", "Value": { "Ref" : "AWS::StackName" }, "PropagateAtLaunch": true}
        ],
        "LoadBalancerNames" : [ { "Ref" : "CoreOSELB" } ]
      }
    },
    "CoreOSServerLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "InstanceType": {"Ref": "InstanceType"},
        "SpotPrice": "0.006",
        "KeyName": {"Ref": "KeyPair"},
        "SecurityGroups": [{"Ref": "CoreOSSecurityGroup"}],
        "UserData" : { "Fn::Base64":
          { "Fn::Join": [ "", [
            "#cloud-config\n\n",
            "coreos:\n",
            "  fleet:\n",
            "    metadata: region=", { "Ref" : "AWS::Region" }, "\n",
            "  etcd:\n",
            "    peer-heartbeat-interval: 100\n",
            "    peer-election-timeout: 500\n",
            "    discovery: ", { "Ref": "DiscoveryURL" }, "\n",
            "    addr: $", { "Ref": "AdvertisedIPAddress" }, "_ipv4:4001\n",
            "    peer-addr: $", { "Ref": "AdvertisedIPAddress" }, "_ipv4:7001\n",
            "  units:\n",
            "    - name: etcd.service\n",
            "      command: start\n",
            "    - name: fleet.service\n",
            "      command: start\n",
            "    - name: blog.service\n",
            "      command: start\n",
            "      content: |\n",
            "        [Unit]\n",
            "        Description=Blog\n",
            "        After=docker.service\n",
            "        Requires=docker.service\n",
            "\n",
            "        [Service]\n",
            "        TimeoutStartSec=0\n",
            "        ExecStartPre=-/usr/bin/docker kill blog\n",
            "        ExecStartPre=-/usr/bin/docker rm blog\n",
            "        ExecStartPre=/usr/bin/docker pull aaronbbrown/blog\n",
            "        ExecStart=/usr/bin/docker run --rm --name blog -p 8080:80 aaronbbrown/blog\n",
            "        ExecStop=/usr/bin/docker stop blog\n",
            "\n",
            "        [X-Fleet]\n",
            "        Global=true\n",
            "        MachineMetadata=region=", { "Ref" : "AWS::Region" }, "\n"
            ] ]
          }
        }
      }
    }
  }
}
