{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "My Happy VPC",
  "Parameters": {
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "AaronBrown",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "ServerAccess": {
      "Description": "CIDR IP range allowed to login to the NAT instance",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
    }
  },

  "Mappings": {
    "SubnetConfig": {
      "VPC":     { "CIDR": "10.10.0.0/16" },
      "Public1":  { "CIDR": "10.10.0.0/24",    "AZ": "us-east-1a" },
      "Public2":  { "CIDR": "10.10.1.0/24",    "AZ": "us-east-1c" },
      "Public3":  { "CIDR": "10.10.2.0/24",    "AZ": "us-east-1e" },
      "Private1":  { "CIDR": "10.10.100.0/24", "AZ": "us-east-1a" },
      "Private2":  { "CIDR": "10.10.101.0/24", "AZ": "us-east-1c" },
      "Private3":  { "CIDR": "10.10.102.0/24", "AZ": "us-east-1e" }
    },
    "NatRegionMap": { "us-east-1": { "AMI": "ami-224dc94a" } },
    "CoreOSRegionMap": { "us-east-1": { "AMI": "ami-343b195c" } }
  },

  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": { "Fn::FindInMap": [ "SubnetConfig", "VPC", "CIDR" ] },
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackName" } },
          { "Key": "Network", "Value": "Public" },
          { "Key": "Name", "Value": "NAT VPC" }
        ]
      }
    },
    "PublicSubnet1": {
      "DependsOn": [ "VPC" ],
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": { "Fn::FindInMap": [ "SubnetConfig", "Public1", "CIDR" ] },
        "AvailabilityZone": { "Fn::FindInMap": [ "SubnetConfig", "Public1", "AZ" ] },
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackName" } },
          { "Key": "Network", "Value": "Public" },
          { "Key": "Name", "Value": "Public Subnet 1" }
        ]
      }
    },
    "PublicSubnet2": {
      "DependsOn": [ "VPC" ],
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": { "Fn::FindInMap": [ "SubnetConfig", "Public2", "CIDR" ] },
        "AvailabilityZone": { "Fn::FindInMap": [ "SubnetConfig", "Public2", "AZ" ] },
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackName" } },
          { "Key": "Network", "Value": "Public" },
          { "Key": "Name", "Value": "Public Subnet 2" }
        ]
      }
    },
    "PublicSubnet3": {
      "DependsOn": [ "VPC" ],
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": { "Fn::FindInMap": [ "SubnetConfig", "Public3", "CIDR" ] },
        "AvailabilityZone": { "Fn::FindInMap": [ "SubnetConfig", "Public3", "AZ" ] },
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackName" } },
          { "Key": "Network", "Value": "Public" },
          { "Key": "Name", "Value": "Public Subnet 3" }
        ]
      }
    },

    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackName" } },
          { "Key": "Network", "Value": "Public" }
        ]
      }
    },
    "GatewayToInternet": {
      "DependsOn": [ "VPC", "InternetGateway" ],
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "InternetGatewayId": { "Ref": "InternetGateway" }
      }
    },
    "PublicRouteTable": {
      "DependsOn": [ "VPC" ],
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackName" } },
          { "Key": "Network", "Value": "Public" } ]
      }
    },
    "PublicRoute": {
      "DependsOn": [ "PublicRouteTable", "InternetGateway" ],
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": { "Ref": "PublicRouteTable" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "InternetGateway" }
      }
    },
    "PublicSubnet1RouteTableAssociation": {
      "DependsOn": [ "PublicSubnet1", "PublicRouteTable" ],
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PublicSubnet1" },
        "RouteTableId": { "Ref": "PublicRouteTable" }
      }
    },
    "PublicSubnet2RouteTableAssociation": {
      "DependsOn": [ "PublicSubnet2", "PublicRouteTable" ],
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PublicSubnet2" },
        "RouteTableId": { "Ref": "PublicRouteTable" }
      }
    },
    "PublicSubnet3RouteTableAssociation": {
      "DependsOn": [ "PublicSubnet2", "PublicRouteTable" ],
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PublicSubnet3" },
        "RouteTableId": { "Ref": "PublicRouteTable" }
      }
    },

    "PrivateSubnet1": {
      "DependsOn": [ "VPC" ],
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": { "Fn::FindInMap": [ "SubnetConfig", "Private1", "CIDR" ] },
        "AvailabilityZone": { "Fn::FindInMap": [ "SubnetConfig", "Private1", "AZ" ] },
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackName" } },
          { "Key": "Network", "Value": "Private" },
          { "Key": "Name", "Value": "Private Subnet 1" }
        ]
      }
    },
    "PrivateSubnet2": {
      "DependsOn": [ "VPC" ],
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": { "Fn::FindInMap": [ "SubnetConfig", "Private2", "CIDR" ] },
        "AvailabilityZone": { "Fn::FindInMap": [ "SubnetConfig", "Private2", "AZ" ] },
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackName" } },
          { "Key": "Network", "Value": "Private" },
          { "Key": "Name", "Value": "Private Subnet 2" }
        ]
      }
    },
    "PrivateSubnet3": {
      "DependsOn": [ "VPC" ],
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": { "Fn::FindInMap": [ "SubnetConfig", "Private3", "CIDR" ] },
        "AvailabilityZone": { "Fn::FindInMap": [ "SubnetConfig", "Private3", "AZ" ] },
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackName" } },
          { "Key": "Network", "Value": "Private" },
          { "Key": "Name", "Value": "Private Subnet 3" }
        ]
      }
    },


    "PrivateRouteTable": {
      "DependsOn": [ "VPC" ],
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackName" } },
          { "Key": "Network", "Value": "Private" }
        ]
      }
    },
    "PrivateSubnet1RouteTableAssociation": {
      "DependsOn": [ "PrivateSubnet1", "PrivateRouteTable" ],
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PrivateSubnet1" },
        "RouteTableId": { "Ref": "PrivateRouteTable" }
      }
    },
    "PrivateSubnet2RouteTableAssociation": {
      "DependsOn": [ "PrivateSubnet2", "PrivateRouteTable" ],
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PrivateSubnet2" },
        "RouteTableId": { "Ref": "PrivateRouteTable" }
      }
    },

    "PrivateSubnet3RouteTableAssociation": {
      "DependsOn": [ "PrivateSubnet3", "PrivateRouteTable" ],
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PrivateSubnet3" },
        "RouteTableId": { "Ref": "PrivateRouteTable" }
      }
    },


    "NatSecurityGroup": {
      "DependsOn": [ "VPC" ],
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "NAT Security Group",
        "VpcId": { "Ref": "VPC" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": { "Ref": "ServerAccess" }
          }
        ],
        "Tags": [ { "Key": "Name", "Value": "NAT Security Group" } ]
      }
    },
    "NatSecurityGroupIngress1": {
      "DependsOn": [ "NatSecurityGroup" ],
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "NatSecurityGroup" },
        "IpProtocol": "icmp",
        "FromPort": "-1",
        "ToPort": "-1",
        "SourceSecurityGroupId": { "Ref": "NatSecurityGroup" }
      }
    },
    "NatSecurityGroupIngress22": {
      "DependsOn": [ "NatSecurityGroup" ],
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "NatSecurityGroup" },
        "IpProtocol": "tcp",
        "FromPort": "22",
        "ToPort": "22",
        "SourceSecurityGroupId": { "Ref": "NatSecurityGroup" }
      }
    },
    "NAT": {
      "DependsOn": [ "PublicSubnet1", "NatSecurityGroup" ],
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": "t1.micro",
        "KeyName": { "Ref": "KeyName" },
        "SourceDestCheck": "false",
        "ImageId": {
          "Fn::FindInMap": [ "NatRegionMap", { "Ref": "AWS::Region" }, "AMI" ] },
        "NetworkInterfaces": [
          {
            "GroupSet": [ { "Ref": "NatSecurityGroup" } ],
            "AssociatePublicIpAddress": "true",
            "DeviceIndex": "0",
            "DeleteOnTermination": "true",
            "SubnetId": { "Ref": "PublicSubnet1" }
          }
        ],
        "Tags": [
          { "Key": "Name", "Value": "NAT" }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [ "",
              [ "#!/bin/bash\n",
                "yum update -y && yum install -y yum-cron && chkconfig yum-cron on" ]
            ]
          }
        }
      }
    },
    "PrivateRoute": {
      "DependsOn": [ "PrivateRouteTable", "NAT" ],
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": { "Ref": "PrivateRouteTable" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": { "Ref": "NAT" }
      }
    }
  },
  "Outputs": {
    "NATIP": {
      "Description": "NAT IP address",
      "Value": { "Fn::GetAtt": [ "NAT", "PublicIp" ] }
    }
  }
}
