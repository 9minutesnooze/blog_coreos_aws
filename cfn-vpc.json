{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "My Happy VPC",
  "Parameters": {
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "AaronBrown",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "NATInstanceType" : {
      "Type" : "String",
      "Default" : "t1.micro",
      "AllowedValues" : ["t1.micro", "m1.small", "m1.large"],
      "Description" : "Enter t1.micro, m1.small, or m1.large. Default is t1.micro."
    },
    "NATImageId" : {
      "Type" : "String",
      "Description" : "AMI to use for NAT Instance"
    },

    "ServerAccess": {
      "Description": "CIDR IP range allowed to login to the NAT instance",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
    }
  },

  "Mappings": {
    "SubnetConfig": {
      "VPC":     { "CIDR": "10.10.0.0/16" },
      "Public1":  { "CIDR": "10.10.0.0/24",    "AZ": "us-east-1a" },
      "Public2":  { "CIDR": "10.10.1.0/24",    "AZ": "us-east-1c" },
      "Public3":  { "CIDR": "10.10.2.0/24",    "AZ": "us-east-1e" },
      "Private1":  { "CIDR": "10.10.100.0/24", "AZ": "us-east-1a" },
      "Private2":  { "CIDR": "10.10.101.0/24", "AZ": "us-east-1c" },
      "Private3":  { "CIDR": "10.10.102.0/24", "AZ": "us-east-1e" }
    }
  },

  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": { "Fn::FindInMap": [ "SubnetConfig", "VPC", "CIDR" ] },
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackName" } },
          { "Key": "Network", "Value": "Public" },
          { "Key": "Name", "Value": "NAT VPC" }
        ]
      }
    },
    "PublicSubnet1": {
      "DependsOn": [ "VPC" ],
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": { "Fn::FindInMap": [ "SubnetConfig", "Public1", "CIDR" ] },
        "AvailabilityZone": { "Fn::FindInMap": [ "SubnetConfig", "Public1", "AZ" ] },
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackName" } },
          { "Key": "Network", "Value": "Public" },
          { "Key": "Name", "Value": "Public Subnet 1" }
        ]
      }
    },
    "PublicSubnet2": {
      "DependsOn": [ "VPC" ],
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": { "Fn::FindInMap": [ "SubnetConfig", "Public2", "CIDR" ] },
        "AvailabilityZone": { "Fn::FindInMap": [ "SubnetConfig", "Public2", "AZ" ] },
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackName" } },
          { "Key": "Network", "Value": "Public" },
          { "Key": "Name", "Value": "Public Subnet 2" }
        ]
      }
    },
    "PublicSubnet3": {
      "DependsOn": [ "VPC" ],
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": { "Fn::FindInMap": [ "SubnetConfig", "Public3", "CIDR" ] },
        "AvailabilityZone": { "Fn::FindInMap": [ "SubnetConfig", "Public3", "AZ" ] },
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackName" } },
          { "Key": "Network", "Value": "Public" },
          { "Key": "Name", "Value": "Public Subnet 3" }
        ]
      }
    },

    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackName" } },
          { "Key": "Network", "Value": "Public" }
        ]
      }
    },
    "GatewayToInternet": {
      "DependsOn": [ "VPC", "InternetGateway" ],
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "InternetGatewayId": { "Ref": "InternetGateway" }
      }
    },
    "PublicRouteTable": {
      "DependsOn": [ "VPC" ],
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackName" } },
          { "Key": "Network", "Value": "Public" } ]
      }
    },
    "PublicRoute": {
      "DependsOn": [ "PublicRouteTable", "InternetGateway" ],
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": { "Ref": "PublicRouteTable" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "InternetGateway" }
      }
    },
    "PublicSubnet1RouteTableAssociation": {
      "DependsOn": [ "PublicSubnet1", "PublicRouteTable" ],
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PublicSubnet1" },
        "RouteTableId": { "Ref": "PublicRouteTable" }
      }
    },
    "PublicSubnet2RouteTableAssociation": {
      "DependsOn": [ "PublicSubnet2", "PublicRouteTable" ],
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PublicSubnet2" },
        "RouteTableId": { "Ref": "PublicRouteTable" }
      }
    },
    "PublicSubnet3RouteTableAssociation": {
      "DependsOn": [ "PublicSubnet2", "PublicRouteTable" ],
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PublicSubnet3" },
        "RouteTableId": { "Ref": "PublicRouteTable" }
      }
    },

    "PrivateSubnet1": {
      "DependsOn": [ "VPC" ],
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": { "Fn::FindInMap": [ "SubnetConfig", "Private1", "CIDR" ] },
        "AvailabilityZone": { "Fn::FindInMap": [ "SubnetConfig", "Private1", "AZ" ] },
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackName" } },
          { "Key": "Network", "Value": "Private" },
          { "Key": "Name", "Value": "Private Subnet 1" }
        ]
      }
    },
    "PrivateSubnet2": {
      "DependsOn": [ "VPC" ],
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": { "Fn::FindInMap": [ "SubnetConfig", "Private2", "CIDR" ] },
        "AvailabilityZone": { "Fn::FindInMap": [ "SubnetConfig", "Private2", "AZ" ] },
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackName" } },
          { "Key": "Network", "Value": "Private" },
          { "Key": "Name", "Value": "Private Subnet 2" }
        ]
      }
    },
    "PrivateSubnet3": {
      "DependsOn": [ "VPC" ],
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": { "Fn::FindInMap": [ "SubnetConfig", "Private3", "CIDR" ] },
        "AvailabilityZone": { "Fn::FindInMap": [ "SubnetConfig", "Private3", "AZ" ] },
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackName" } },
          { "Key": "Network", "Value": "Private" },
          { "Key": "Name", "Value": "Private Subnet 3" }
        ]
      }
    },


    "PrivateRouteTable": {
      "DependsOn": [ "VPC" ],
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackName" } },
          { "Key": "Network", "Value": "Private" }
        ]
      }
    },
    "PrivateSubnet1RouteTableAssociation": {
      "DependsOn": [ "PrivateSubnet1", "PrivateRouteTable" ],
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PrivateSubnet1" },
        "RouteTableId": { "Ref": "PrivateRouteTable" }
      }
    },
    "PrivateSubnet2RouteTableAssociation": {
      "DependsOn": [ "PrivateSubnet2", "PrivateRouteTable" ],
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PrivateSubnet2" },
        "RouteTableId": { "Ref": "PrivateRouteTable" }
      }
    },

    "PrivateSubnet3RouteTableAssociation": {
      "DependsOn": [ "PrivateSubnet3", "PrivateRouteTable" ],
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PrivateSubnet3" },
        "RouteTableId": { "Ref": "PrivateRouteTable" }
      }
    },


    "NatSecurityGroup": {
      "DependsOn": [ "VPC" ],
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "NAT Security Group",
        "VpcId": { "Ref": "VPC" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": { "Ref": "ServerAccess" }
          }
        ],
        "Tags": [ { "Key": "Name", "Value": "NAT Security Group" } ]
      }
    },
    "NatSecurityGroupIngress1": {
      "DependsOn": [ "NatSecurityGroup" ],
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "NatSecurityGroup" },
        "IpProtocol": "icmp",
        "FromPort": "-1",
        "ToPort": "-1",
        "SourceSecurityGroupId": { "Ref": "NatSecurityGroup" }
      }
    },
    "NatSecurityGroupIngress22": {
      "DependsOn": [ "NatSecurityGroup" ],
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "NatSecurityGroup" },
        "IpProtocol": "tcp",
        "FromPort": "22",
        "ToPort": "22",
        "SourceSecurityGroupId": { "Ref": "NatSecurityGroup" }
      }
    },
    "NatSecurityGroupIngressAllInternal": {
      "DependsOn": [ "NatSecurityGroup" ],
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp" : { "Fn::FindInMap": [ "SubnetConfig", "VPC", "CIDR" ] },
        "GroupId": { "Ref": "NatSecurityGroup" },
        "IpProtocol": "-1",
        "FromPort": "0",
        "ToPort": "65535"
      }
    },

    "NATIAMRole" : {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/",
        "Policies": [ {
          "PolicyName" : "NATENI",
          "PolicyDocument": {
            "Version" : "2012-10-17",
            "Statement": [ {
              "Effect": "Allow",
              "Action": [ "ec2:AttachNetworkInterface" ],
              "Resource": [ "*" ]
            } ]
          }
        } ]
      }
    },

    "NATInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ { "Ref": "NATIAMRole" } ]
      }
    },


    "NATENI" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "GroupSet" : [{ "Ref" : "NatSecurityGroup" }],
        "SourceDestCheck" : "false",
        "SubnetId" : { "Ref" : "PublicSubnet1" },
        "Tags": [ { "Key": "Name", "Value": "NAT ENI" } ]
      }
    },

    "NATEIP" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : { "Domain" : "vpc" }
    },

    "NATEIPAssociation" : {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId": { "Fn::GetAtt": [ "NATEIP", "AllocationId" ] },
        "NetworkInterfaceId": { "Ref" : "NATENI" }
      }
    },

    "NATLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "DependsOn" : [ "NATIAMRole", "NATInstanceProfile", "GatewayToInternet" ],
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "files": {
              "/etc/nat_eni.txt" : {
                "content": { "Ref" : "NATENI" } ,
                "mode": "0644",
                "owner": "root",
                "group": "root"
              },
              "/etc/sysconfig/iptables" : {
                "mode": "0644",
                "owner": "root",
                "group" : "root",
                "content": {
                  "Fn::Join": [ "",
                    [
                      "*nat\n",
                      ":PREROUTING ACCEPT [0:0]\n",
                      ":INPUT ACCEPT [0:0]\n",
                      ":OUTPUT ACCEPT [0:0]\n",
                      ":POSTROUTING ACCEPT [0:0]\n",
                      "-A POSTROUTING -j MASQUERADE\n",
                      "COMMIT\n",
                      "*filter\n",
                      ":INPUT ACCEPT [24:1716]\n",
                      ":FORWARD ACCEPT [0:0]\n",
                      ":OUTPUT ACCEPT [13:1552]\n",
                      "-A FORWARD -j ACCEPT\n",
                      "COMMIT\n"
                    ]
                  ]
                }
              },
              "/usr/local/bin/attach_eni.sh" : {
                "mode": "0700",
                "owner": "root",
                "group": "root",
                "content": {
                  "Fn::Join": [ "",
                  [
                    "#!/bin/bash\n",
                    "function log () {\n",
                    "  echo \"$(date +'%b %e %T') $@\"\n",
                    "  logger -- $(basename $0)\" - $@\"\n",
                    "}\n",
                    "\n",
                    "my_instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\n",
                    "my_availability_zone=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)\n",
                    "my_zone_letter=$(echo -n $my_availability_zone | tail -c -1)\n",
                    "my_eni_id='", { "Ref" : "NATENI" }, "'\n",
                    "export AWS_DEFAULT_REGION='", { "Ref" : "AWS::Region" }, "'\n",
                    "/usr/bin/aws ec2 attach-network-interface --network-interface-id ${my_eni_id} --instance-id ${my_instance_id} --device-index 1\n",
                    "retcode=$?\n",
                    "[ \"$retcode\" -eq 0 ] && { log 'eni attachment successful' ; exit 0 ; } || { log 'eni attachment failed' ; exit 1 ; }\n"
                  ]
                ] }
              }
            }
          }
        }
      },
      "Properties": {
        "AssociatePublicIpAddress": "true",
        "IamInstanceProfile": { "Ref": "NATInstanceProfile" },
        "ImageId": { "Ref" : "NATImageId" },
        "InstanceType": { "Ref" : "NATInstanceType" },
        "SpotPrice": "0.011",
        "KeyName": {"Ref": "KeyName"},
        "SecurityGroups": [{"Ref": "NatSecurityGroup"}],
        "UserData" : {
          "Fn::Base64": {
            "Fn::Join": [ "",
              [
                "#!/bin/bash\n",
                "yum update -y && yum install -y yum-cron && chkconfig yum-cron on\n",
                "yum install -y aws-cli aws-cfn-bootstrap\n",
                "/opt/aws/bin/cfn-init --region ", { "Ref" : "AWS::Region" },
                        " --stack ", { "Ref" : "AWS::StackName" },
                        " --resource NATLaunchConfig\n",
                "/usr/local/bin/attach_eni.sh && sleep 60 && ifdown eth0\n",
                "/etc/init.d/iptables restart\n"
              ]
            ]
          }
        }
      }
    },

    "NATASG": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": [{ "Fn::GetAtt" : [ "PublicSubnet1", "AvailabilityZone" ] }],
        "VPCZoneIdentifier": [{ "Ref" : "PublicSubnet1" }],
        "LaunchConfigurationName": {"Ref": "NATLaunchConfig"},
        "MinSize": "1",
        "MaxSize": "1",
        "DesiredCapacity": "1",
        "Tags": [
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" }, "PropagateAtLaunch": true },
          { "Key": "Name", "Value": "NAT", "PropagateAtLaunch": true}
        ]
      },
      "UpdatePolicy" : {
        "AutoScalingRollingUpdate" : {
          "MinInstancesInService" : "0",
          "MaxBatchSize" : "1"
        }
      }
    },

    "PrivateRoute": {
      "DependsOn": [ "PrivateRouteTable", "NATENI" ],
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": { "Ref": "PrivateRouteTable" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NetworkInterfaceId": { "Ref": "NATENI" }
      }
    }
  },

  "Outputs": {
    "NATIP": {
      "Description": "NAT IP address",
      "Value": { "Ref": "NATEIP" }
    }
  }
}
